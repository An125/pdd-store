<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">
	<!-- web.xml中shiro的filter对应的bean。id必须和web.xml文件中的DelegatingFilterProxy的<filter-name>一致-->
	<!-- Shiro 的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/login.html" />
		<!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
		<property name="successUrl" value="/index.html"/> 
		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
		<property name="unauthorizedUrl" value="/403.html"/>
		
		<!-- 在DefaultFilter中声明 filterChainDefinitionMap -->
		<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
		
		<!-- 自定义filter配置 -->
<!-- 		<property name="filters">
			<map>
				将自定义 的FormAuthenticationFilter注入shiroFilter中
				<entry key="authc" value-ref=""></entry>
			</map>
		</property> -->
		
		<!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 (当资源和权限的关系特别多， 会导致该配置文件冗余臃肿,不建议在配置文件中配置)-->
<!-- 		<property name="filterChainDefinitions">
			<value>
				请求 logout.action地址，shiro去清除session
				/login.html = anon
				/manage/login = anon
				logout 退出
				/manage/logout = logout
				样式可以匿名访问
				/css/** = anon
				/data/** = anon
				/guo_js/** = anon
				/images/** = anon
				/js/** = anon
				/plugins/** = anon 
				/** = authc 所有url都必须认证通过才可以访问
				/** = authc 
				/** = anon所有url都可以匿名访问
				/** = anon
			</value>
		</property> -->
	</bean>
	
	<!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过工厂设计模式来创建一个 filterChainDefinitionMap -->
	<bean id="filterChainDefinitionMapBuilder" 
		class="com.pdd.manage.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
	<!-- 声明 filterChainDefinitionMap -->
    <bean id="filterChainDefinitionMap" 
    	factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>
	
	
	
	
	<!-- securityManager安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		 <!--设置自定义realm --> 
		<property name="realm" ref="customRealm"/>
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"/>
		
		<property name="rememberMeManager.cookie.maxAge" value="10"></property>
	</bean>
	
	<!-- 自定义realm，加载用户信息和权限信息-->
	<bean id="customRealm" class="com.pdd.manage.shiro.realm.CustomRealm">
		<!-- <property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				加密方式
				<property name="hashAlgorithmName" value="MD5"></property>
				加密次数
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property> -->
	</bean>
	
	<!-- 缓存管理器 ，采用EhCache-->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 设置ehcache缓存的配置文件 -->
		<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"></property>
	</bean>
	
	<!-- Shiro生命周期处理器。可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
	
</beans>